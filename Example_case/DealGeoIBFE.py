#!/usr/bin/python
# use python to deal with *.log file generated by geometry model to generate files for IBFE esophagus model:
# two steps (or three)

# step 1) read template file

# step 2) write_out new file

# step 3) plot the cross-sectional mesh for double check
import sys
import numpy as np
import matplotlib.pyplot as plt

def write_read(template_file, log_file, target_file):
	fread =open(template_file,'r');
	fwrite=open(target_file,'w');
	fguide=open(log_file,'r');    
#log file
	line_id =0;
	data_line =0;
	num_domains = 1;
	
	for aline in fguide:
		line_id = line_id +1
		#aline = fguide.readline()
		print "line#",line_id, "\t", aline
		if line_id ==3:
			log_no3_bcInfo= aline
		elif line_id ==4:
			log_no4_bcData=aline
		elif line_id == 5:
			log_no5_domainInfo = aline
		elif line_id ==6:
			log_no6_domainData=aline
		elif line_id ==7:
			log_no7_lastID=aline
        	elif line_id ==8:
			num_domains=int(list(log_no5_domainInfo)[0])
			mat_data = np.zeros((num_domains,4));
		elif (line_id < 9+num_domains and line_id > 8):
			blist = aline.split()
			mat_data[data_line,0]= float(blist[1])
			mat_data[data_line,1]= float(blist[2])
			mat_data[data_line,2]= float(blist[3])
			mat_data[data_line,3]= float(blist[4])	
			
			data_line = data_line +1
		else:
			print "not used this line"
			
				
# template file:
	str_1 ="begin global_mesh"
#	Lineoff_1 = 3;
	Check_str_1 =0;

	str_2="begin boundary_info"
#	Lineoff_2= 3;
	Check_str_2 =0;
	print "*******************************************************"	
	print "read the template file", template_file
# use list to define things:
	list_str = [str_1, str_2]
#	list_line_no=[Lineoff_1, Lineoff_2]
	list_lines_modify=[2,1]
    
	list_check_id=[0,0];
	num_list = len(list_str);

	monitered_line_id=-1
	line_id =0
	fguide.close()
	for aline in fread:
		line_id = line_id +1
		#aline = fread.readline()
		print "line#",line_id, "\t", aline
		for k in range(num_list):
			astr=list_str[k]
			if aline[0:len(astr)]==astr:
				list_check_id[k]=1;
				print " begin monitor the string =", astr
			#begin to check whether read or right
			if list_check_id[k]>0:
				monitered_line_id=monitered_line_id +1 # monitied line id =0
		# specific code for this version
		if (list_check_id[0]>0 and monitered_line_id ==3):
			fwrite.write(log_no5_domainInfo)
			print"![new line]:",log_no5_domainInfo 
		elif(list_check_id[0]>0 and monitered_line_id ==4):
			fwrite.write(log_no6_domainData)
			print"![new line]:",log_no6_domainData
			list_check_id[0]=0
			monitered_line_id=-1
		elif(list_check_id[1]>0 and monitered_line_id ==3):
			fwrite.write(log_no4_bcData)
			print"![new line]:",log_no4_bcData
			list_check_id[1]=0
			monitered_line_id=-1
		else:
			fwrite.write(aline)
			print aline
	print "success in writing files:",target_file
	
	fread.close()
	fwrite.close()
	return 1, mat_data, log_no6_domainData, log_no4_bcData, log_no7_lastID
			 
			
def check_plot(mat_data):
	num_layers = len(mat_data[:,0]);
	str_color="rgbkmyrgb"
	for k_layer in range(num_layers):
		ri=mat_data[k_layer,0];
		dr=(mat_data[k_layer,1] - mat_data[k_layer,0]) / mat_data[k_layer,2];
		dtheta= 2*np.pi / mat_data[k_layer, 3];
		vec_theta = np.arange(0.0,2*np.pi+dtheta,dtheta);
		for k_r in range(int(mat_data[k_layer,2])):
			# plot layer by layer
			cur_r = k_r * dr + ri;
			vec_y = cur_r * np.sin(vec_theta);
			vec_x = cur_r * np.cos(vec_theta);
			plt.plot(vec_x, vec_y,str_color[k_layer]+"o--")
				 
	plt.savefig("checkCSA.png")
	plt.show()
		
		
def write_read_solid(template_solid_file,target_solid_file,num_domains,log_domainData,log_bcData, log_lastID):
	
	fread=open(template_solid_file,'r')
	fwrite=open(target_solid_file,'w')
	Int_lastID = int ((log_lastID.split())[0])
	ListDomain=(log_domainData.split())[0:num_domains];
	
	vec_ID = range(num_domains +1)
	for k_ID in range(num_domains):
		vec_ID[k_ID]= int(ListDomain[k_ID])
	vec_ID[num_domains] = Int_lastID +1
	
	ListBC=(log_bcData.split())[0:4];

	str_bgn = "begin material"
	str_end ="end material"
	Is_bgn =0;
	Is_jump =0;
	Str_copy="// *** material information: 2 domains(materials)"
	
	str_bc="begin boundary"
	Is_bgn_bc=0;
	line_id =0;
	for aline in fread:
		line_id = line_id +1
		#aline = fread.readline()
		print "line#",line_id, "\t", aline
		## check material info
		if aline[0:len(str_bgn)] == str_bgn:
			fwrite.write(aline);	
			Is_bgn =1
			Is_jump =1
		if aline[0:len(str_end)]==str_end:
			
			Is_jump =0
			
		
		if aline[0:len(str_bc)] == str_bc:
			
			Is_bgn_bc = 1

		if Is_bgn ==1: # begin to print material info
			
			fwrite.write(Str_copy+"\n")
			fwrite.write(str(num_domains) + "\t 4 // number of domains=2; No. material parameter info \n")
			for k_domain in range(num_domains):
				id_start =vec_ID[k_domain];
				id_end = vec_ID[k_domain+1] -1
				str_temp = str(k_domain) + "\t" + str(id_start) + "\t" + str(id_end) +"// subdomain info: subdomain_id; elem.beg_id; elem.end_id \n"
				fwrite.write(str_temp)
				fwrite.write("1  1  // fcn_id info: fcn_kee; fcx_stress; \n")
				fwrite.write("1 0 1 1 //material para info: C1, alpha1, C2, alpha2\n")	
			Is_bgn=0 # finish printing material info
		elif Is_jump == 0: # the print does not jump
			if Is_bgn_bc ==0:
				fwrite.write(aline)
			elif Is_bgn_bc == 1: # just print aline
				fwrite.write(aline)	
				Is_bgn_bc = Is_bgn_bc+1
			elif Is_bgn_bc == 2: # just print aline
				fwrite.write(aline)
				Is_bgn_bc = Is_bgn_bc +1
			elif Is_bgn_bc == 3: # just print aline
				fwrite.write(aline)
				Is_bgn_bc = Is_bgn_bc +1
			elif Is_bgn_bc ==4:
				fwrite.write(log_bcData);
				Is_bgn_bc =0
			else:
				fwrite.write(aline)

	
	return 1		


if __name__ == "__main__":	
    # command-line argument
    print '++++ running: ', sys.argv
    my_argv=sys.argv[1:]
    alen=len(my_argv)
    print alen
    if (alen<1):
		print '++++ please give the log file about geometry info'
		print '++++ [For IBFE] use default template: geometry.info_template'
		print '++++ [For IBFE] check generated file: geometry.info'
		print '++++ [For solid mechanics] use default template: material.info_template'
		print '++++ [For solid mechanics] check generated file: material.info' 
		template_file ="geometry.info_template"
		target_file="geometry.info"

		template_solid_file="material.info_template"
		target_solid_file="material.info"
		#log_file=my_argv[0]
    else:
		template_file = "geometry.info_template"
		log_file=my_argv[0]
		target_file="geometry.info"
		print '++++ [For IBFE] use default template: geometry.info_template'
		print '++++ [For IBFE] check generated file: geometry.info'
		print '++++ [For solid mechanics] use default template: material.info_template'
		print '++++ [For solid mechanics] check generated file: material.info' 
		template_solid_file="material.info_template"
		target_solid_file="material.info"

	# read and write at the same time
    		state, mat_data, log_domainData, log_bcData, log_lastID=write_read(template_file, log_file, target_file);
    		print "state: generate [IBFE] target file: ", target_file, "success=", state
		check_plot(mat_data);
		print "check the plot: checkCSA.png"
		num_domains = len(mat_data[:,0]);
    		state=write_read_solid(template_solid_file, target_solid_file, num_domains,log_domainData,log_bcData, log_lastID);
    		print "state: generate [solid mechancis] target file: ", target_solid_file, "success=", state



